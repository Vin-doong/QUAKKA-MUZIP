<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>현재 날씨에 따른 추천 플레이리스트</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link rel="icon" href="/favicon_io/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="/css/weather.css" />
    <style>
      #getLocation {
      background-color: #4f46e5; /* $indigo-600 색상 코드 */
      border-color: #07026e;
      border-width: 2px;
      color: #fff; /* 텍스트를 흰색으로 설정 */
    }
    #getLocation:hover {
      background-color: #4338ca; /* $indigo-700 색상 */
      border-color: #695bff;  
      border-width: 2px;
    }
      #create-playlist {
      background-color: #53a748; /* $indigo-600 색상 코드 */
      border-color: #2b5a32;
      border-width: 2px;
      color: #fff; /* 텍스트를 흰색으로 설정 */
    }
    #create-playlist:hover {
      background-color: #2b5a32; /* $indigo-700 색상 */
      border-color: #53a748;  
      border-width: 2px;
    }
      #playButton {
  background-color: #e49012; 
  border-color: #886c20;
  border-width: 2px;
  color: #ffffff; /* 흰색 텍스트 */
  text-shadow: 1px 1px 2px #000, -1px -1px 2px #000;
}#playButton:hover {
  background-color: #d3b460; /* 호버 시 색상 */
  border-color: #e49012;
  border-width: 2px;

}#loadingMessage{
    color: #9478c7; 
    text-shadow: 1px 1px 2px #1d1b20, -1px -1px 2px #300e3a; 
  }


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   끄 읏  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
      </style>
  </head>
  <body>
    <!-- 헤더 -->
    <%- include('partials/header'); %>
    <%- include('partials/offcanvas') %>

    <div class="content container text-center mt-5">
      <h1>현재 위치 날씨에 따른 추천 플레이리스트</h1>

      <!-- 0113 raemi -->
      <!-- 날씨 결과 이미지 및 주소 표시 -->
      <div id="weatherImage" class="mt-4"></div>
      <div id="addressDisplay" class="mt-2"></div> <!-- 변경 부분 ~!!!!!~!~!~!~!~!~!~!~!~!~ text-muted" 때문에 출력 폰트 회색 고정 에러 제거   -->

      <!-- 위치 요청 버튼 -->
      <div class="mt-4">
        <button id="getLocation" class="btn btn-outline-info">
          추천 플레이리스트 보기
        </button>
      </div>

      <!-- 로딩 메시지 -->
      <div id="loadingMessage" class="mt-4 d-none">
        데이터를 가져오는 중입니다. 잠시만 기다려주세요...
      </div>

      <!-- 오류 메시지 -->
      <div id="errorMessage" class="mt-4 text-danger d-none"></div>

      <!-- 플레이리스트 생성 양식 -->
      <div id="playlistForm" class="mt-4 d-none">
        <div class="mb-3">
          <label for="playlistName" class="form-label">플레이리스트 이름</label>
          <input
            type="text"
            id="playlistName"
            class="form-control"
            placeholder="플레이리스트 이름을 입력하세요"
          />
        </div>
        <div class="mb-3">
          <label for="playlistDescription" class="form-label">플레이리스트 설명</label>
          <input
            type="text"
            id="playlistDescription"
            class="form-control"
            placeholder="플레이리스트 설명을 입력하세요"
          />
        </div>
        <div class="mb-3">
          <label for="publicOption" class="form-label">공개 설정</label>
          <select id="publicOption" class="form-select">
            <option value="true">공개</option>
            <option value="false">개인</option>
          </select>
        </div>
      </div>

      <!-- 플레이리스트 담기 버튼 -->
      <div id="playlistAction" class="mt-4 d-none">
        <button id="create-playlist" class="btn btn-success">플레이리스트 담기</button>
      </div>

      <!-- 결과 표시 영역 -->
      <div id="results" class="mt-5"></div>
    </div>

    <!-- 플레이어 푸터 -->
    <div id="playerFooterContainer" class="footer-container d-none">
      <%- include('partials/playerFootermini'); %>
    </div>

    <script>
      // 결과 데이터를 저장하기 위한 변수

      // 0113 raemi
      let weather = '';
      let Imagepath = ''; // 이미지경로 저장
      let address = ''; //주소 저장

      let trackUris = []; // URI를 저장할 배열

      // DOM 요소 선택
      const button = document.getElementById("getLocation");
      const loadingMessage = document.getElementById("loadingMessage");
      const errorMessage = document.getElementById("errorMessage");
      const resultsDiv = document.getElementById("results");
      const playlistForm = document.getElementById("playlistForm");
      const playlistAction = document.getElementById("playlistAction");
      const createPlaylistButton = document.getElementById("create-playlist");
      const playerFooterContainer = document.getElementById("playerFooterContainer");

      // 위치 요청 버튼 클릭 시 동작
      button.addEventListener("click", () => {
        loadingMessage.classList.remove("d-none");
        errorMessage.classList.add("d-none");
        resultsDiv.innerHTML = "";
        playlistAction.classList.add("d-none");

        navigator.geolocation.getCurrentPosition(fetchWeatherData, showError);
      });

      // 위치 정보 요청 성공 시 날씨 데이터를 가져옴
      async function fetchWeatherData(position) {
        try {
          const { latitude: lat, longitude: lon } = position.coords;
          const response = await fetch("/weather", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ lat, lon }),
          });

          if (!response.ok) throw new Error("서버 응답 실패");
          const data = await response.json();

          // 0113 raemi
          // 이미지와 주소 데이터를 업데이트
          weather = CodetoWeather(data.weatherCode)
          Imagepath = data.Imagepath
          address = data.address
          // 날씨 이미지 및 주소 표시
          document.getElementById("weatherImage").innerHTML = `<img src="${Imagepath}" alt="Weather Image" class="img-fluid">`;
          document.getElementById("addressDisplay").textContent = `현재 ${address}의 날씨는 ${weather}입니다.`;


          loadingMessage.classList.add("d-none");

          if (data.tracks && data.tracks.length > 0) {
            trackUris = data.tracks.map((track) => track.uri);
            renderResults(data.tracks);
            playlistForm.classList.remove("d-none");
          } else {
            resultsDiv.innerHTML = '<p class="text-muted">추천 플레이리스트를 찾을 수 없습니다.</p>';
          }
        } catch (error) {
          showError(error.message);
        }
      }

      // 플레이리스트 생성 버튼 클릭 시 동작
      createPlaylistButton.addEventListener("click", async () => {
        try {
          const playlistName = document.getElementById("playlistName").value;
          const playlistDescription = document.getElementById("playlistDescription").value;
          const publicOption = document.getElementById("publicOption").value;

          const params = new URLSearchParams({
            playlistName,
            playlistDescription,
            publicOption,
            tracks: JSON.stringify(trackUris),
          });

          const response = await fetch(`/weather/onthehouse?${params.toString()}`);

          if (!response.ok) throw new Error("플레이리스트 생성 실패");
          alert("플레이리스트가 성공적으로 생성되었습니다!");
        } catch (error) {
          alert("플레이리스트 생성 중 오류가 발생했습니다: " + error.message);
        }
      });

      // 결과 렌더링
      function renderResults(tracks) {
        resultsDiv.innerHTML = "";
        let rowDiv;

        tracks.forEach((track, index) => {
          if (index % 5 === 0) {
            rowDiv = document.createElement("div");
            rowDiv.className = "row g-4";
            resultsDiv.appendChild(rowDiv);
          }

          const colDiv = document.createElement("div");
          colDiv.className = "col-md-4 col-lg-2";
          colDiv.innerHTML = `
            <div class="card h-100">
              <img src="${track.album.images[0]?.url}" class="card-img-top" alt="${track.name}">
              <div class="card-body">
                <h5 class="card-title">${track.name}</h5>
                <p class="card-text">아티스트: ${track.artists.map((artist) => artist.name).join(", ")}</p>
                <button id="playButton" class="btn btn-primary play-btn" data-uri="${track.uri}">재생
                </button>
              </div>
            </div>`;
          rowDiv.appendChild(colDiv);
        });

        playlistAction.classList.remove("d-none");
                //노래 재생버튼관련
        document.querySelectorAll(".play-btn").forEach((button) => {
          button.addEventListener("click", (event) => {
            const uri = event.target.getAttribute("data-uri");
            playTrack(uri);
          });
        });
        // Player Footer 표시
        const playerFooterContainer = document.getElementById(
          "playerFooterContainer"
        );
        //0117
        // Play 버튼 이벤트 초기화
        initializePlayButtonListeners();
        playerFooterContainer.classList.remove("d-none");
      };

      // 0113 raemi
      // 날씨 코드 날씨로 변환
      function CodetoWeather(weatherCode) {
        let weather = ''
        if( weatherCode === 0){
          weather = '맑음'
        }else if (weatherCode === 1){
          weather = '흐림'
        }else if (weatherCode === 2){
          weather = '비'
        }else if (weatherCode === 3){
          weather = '눈'
        }
        // 0117 raemi
        else if (weatherCode === 4){
          weather = '안개'
        }else if (weatherCode === 5){
          weather = '연기, 먼지, 화산재'
        }else if (weatherCode === 6){
          weather = '모래'
        }else if (weatherCode === 7){
          weather = '천둥번개, 토네이도'
        }
        return weather
      }

      // 오류 메시지 표시
      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.remove("d-none");
        loadingMessage.classList.add("d-none");
      }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
